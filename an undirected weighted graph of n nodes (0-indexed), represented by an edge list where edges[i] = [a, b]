from collections import defaultdict
import heapq

def maxProbability(n, edges, succProb, start, end):
    graph = defaultdict(list)
    for i, (a, b) in enumerate(edges):
        prob = succProb[i]
        graph[a].append((b, prob))
        graph[b].append((a, prob))

    pq = [(-1, start)]
    probs = [0] * n
    probs[start] = 1

    while pq:
        cur_prob, node = heapq.heappop(pq)
        cur_prob = -cur_prob

        if node == end:
            return cur_prob

        for neighbor, neighbor_prob in graph[node]:
            new_prob = cur_prob * neighbor_prob
            if new_prob > probs[neighbor]:
                probs[neighbor] = new_prob
                heapq.heappush(pq, (-new_prob, neighbor))

    return 0
